// Copyright (c) 2023 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
*@file      boot_if.c
*@brief     Bootloader Interface
*@author    Ziga Miklosic
*@email     ziga.miklosic@gmail.com
*@date      10.08.2023
*@version   V0.1.0
*/
////////////////////////////////////////////////////////////////////////////////
/*!
* @addtogroup Bootloader Interface
* @{ <!-- BEGIN GROUP -->
*
*
*   @note   Change code only between "USER_CODE_BEGIN" and
*           "USER_CODE_END" section!
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include "boot_if.h"

// USER INCLUDE BEGIN...

#include "drivers/peripheral/uart/uart/src/uart.h"

// USER INCLUDE END...

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

// USER CODE BEGIN...

// USER CODE END...

////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

// USER CODE BEGIN...

// USER CODE END...

////////////////////////////////////////////////////////////////////////////////
// Function prototypes
////////////////////////////////////////////////////////////////////////////////

// USER CODE BEGIN...

// USER CODE END...

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

// USER CODE BEGIN...

// USER CODE END...

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup BOOT_IF_API
* @{ <!-- BEGIN GROUP -->
*
* 	Following function are part of Bootloader Interface API.
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*       Initialize Bootloader communication port
*
* @return       status  - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
boot_status_t boot_if_init(void)
{
    boot_status_t status = eBOOT_OK;

    // USER CODE BEGIN...

    if ( eUART_OK != uart_init( eUART_BOOT ))
    {
        status = eBOOT_ERROR;
    }

    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*       Transmit data over Bootloader communication port
*
* @note In case of transmit error function shall return "eBOOT_ERROR" code!
*
* @param[in]    p_data  - Data to transmit
* @param[in]    size    - Size of data to transmit in bytes
* @return       status  - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
boot_status_t boot_if_transmit(const uint8_t * const p_data, const uint16_t size)
{
    boot_status_t status = eBOOT_OK;

    // USER CODE BEGIN...

    if ( eUART_OK != uart_transmit( eUART_BOOT, p_data, size ))
    {
        status = eBOOT_ERROR;
    }

    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*       Receive data over Bootloader communication port
*
* @note In case of reception error or RX FIFO empty function shall return "eBOOT_ERROR" code!
*
* @param[in]    p_data  - Data to transmit
* @return       status  - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
boot_status_t boot_if_receive(uint8_t * const p_data)
{
    boot_status_t status = eBOOT_OK;

    // USER CODE BEGIN...

    if ( eUART_OK != uart_receive( eUART_BOOT, p_data ))
    {
        status = eBOOT_ERROR;
    }

    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*       Clear Bootloader interface reception FIFO
*
* @return       status  - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
boot_status_t boot_if_clear_rx_buf(void)
{
    boot_status_t status = eBOOT_OK;

    // USER CODE BEGIN...

    if ( eUART_OK != uart_clear_rx_buf( eUART_BOOT ))
    {
        status = eBOOT_ERROR;
    }

    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
