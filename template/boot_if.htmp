// Copyright (c) 2024 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
*@file      boot_if.h
*@brief     Bootloader Interface
*@author    Ziga Miklosic
*@email     ziga.miklosic@gmail.com
*@date      15.02.2024
*@version   V0.2.0
*/
////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup BOOT_IF_API
* @{ <!-- BEGIN GROUP -->
*
*/
////////////////////////////////////////////////////////////////////////////////

#ifndef __BOOT_IF_H
#define __BOOT_IF_H

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include "boot/src/boot_types.h"
#include "boot_cfg.h"

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////
boot_status_t   boot_if_init        	(void);
boot_status_t   boot_if_deinit          (void);

boot_status_t   boot_if_transmit    	(const uint8_t * const p_data, const uint16_t size);
boot_status_t   boot_if_receive     	(uint8_t * const p_data);
boot_status_t   boot_if_clear_rx_buf	(void);

boot_status_t   boot_if_flash_write 	(const uint32_t addr, const uint32_t size, const uint8_t * const p_data);
boot_status_t   boot_if_flash_read   	(const uint32_t addr, const uint32_t size, uint8_t * const p_data);
boot_status_t   boot_if_flash_erase   	(const uint32_t addr, const uint32_t size);

const uint8_t * boot_if_get_public_key  (void);

#if ( 1 == BOOT_CFG_CRYPTION_EN )
    void boot_if_decrypt_data   (const uint8_t * const p_crypt_data, uint8_t * const p_decrypt_data, const uint32_t size);
    void boot_if_decrypt_reset  (void);
#endif

#endif // __BOOT_IF_H

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
